/* ============================================================
  Flower Rush ‚Äî "Pick a Flower"
  –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –º–∏–Ω–∏-–∏–≥—Ä–∞: —Å–æ–±–µ—Ä–∏ –∑–∞–∫–∞–∑ –∑–∞ –≤—Ä–µ–º—è.

  ‚úÖ –ß—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ HTML (–º–∏–Ω–∏–º—É–º):
  ------------------------------------------------------------
  <div id="startScreen">
    <select id="difficulty">
      <option value="easy">–õ—ë–≥–∫–∏–π</option>
      <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
      <option value="hard">–°–ª–æ–∂–Ω—ã–π</option>
    </select>
    <button id="playBtn">–ò–≥—Ä–∞—Ç—å</button>
  </div>

  <div id="hud" style="display:none">
    <div id="timer">‚è≥ 00:30</div>
    <div id="score">–û—á–∫–∏: 0</div>
    <div id="order">
      <ul id="orderList"></ul>
    </div>
  </div>

  <div id="gameField" style="display:none"></div>

  <div id="resultScreen" style="display:none">
    <h2 id="resultTitle"></h2>
    <p id="resultDetails"></p>
    <div id="promoWrap" style="display:none">–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <b id="promoCode"></b></div>
    <button id="playAgainBtn">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
  </div>
  ------------------------------------------------------------

  üí° –ö–∞—Ä—Ç–∏–Ω–∫–∏ —Ü–≤–µ—Ç–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
  –ï—Å–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ PNG –≤ /assets/flowers/{id}.png ‚Äî –∏–≥—Ä–∞ –∏—Ö –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç.
  –ò–Ω–∞—á–µ –ø–æ–∫–∞–∂–µ—Ç —ç–º–æ–¥–∑–∏.

  ‚ú® –ü–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—Å—ë –∫–ª–∏–∫–∞–µ—Ç—Å—è (pointer events).
============================================================ */

(() => {
  "use strict";

  // ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ----
  const DIFFICULTY = {
    easy: {
      label: "–õ—ë–≥–∫–∏–π",
      timerSec: 40,
      spawnEveryMs: [650, 900],   // –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—è–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ (min..max)
      ttlMs: [2400, 3800],        // –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ü–≤–µ—Ç–∫–∞
      maxActive: 8,
      orderItemsRange: [3, 4],    // —Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ
      qtyPerItem: [1, 3],         // —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
      missPenaltySec: 2,
      correctScore: 8,
      wrongScore: -2,
      difficultyBonus: 20
    },
    medium: {
      label: "–°—Ä–µ–¥–Ω–∏–π",
      timerSec: 30,
      spawnEveryMs: [520, 750],
      ttlMs: [2000, 3200],
      maxActive: 10,
      orderItemsRange: [4, 6],
      qtyPerItem: [2, 4],
      missPenaltySec: 2,
      correctScore: 10,
      wrongScore: -3,
      difficultyBonus: 50
    },
    hard: {
      label: "–°–ª–æ–∂–Ω—ã–π",
      timerSec: 20,
      spawnEveryMs: [420, 620],
      ttlMs: [1600, 2600],
      maxActive: 12,
      orderItemsRange: [6, 8],
      qtyPerItem: [3, 5],
      missPenaltySec: 3,
      correctScore: 12,
      wrongScore: -4,
      difficultyBonus: 90
    }
  };

  // ---- –ö–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤ ----
  // id ‚Äî –∫–ª—é—á –∑–∞–∫–∞–∑–∞, label ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ, emoji ‚Äî –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, imgSrc ‚Äî –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const FLOWERS = [
    { id: "rose",        label: "–†–æ–∑–∞",        emoji: "üåπ", imgSrc: "/assets/flowers/rose.png" },
    { id: "peony",       label: "–ü–∏–æ–Ω",        emoji: "üå∏", imgSrc: "/assets/flowers/peony.png" },
    { id: "daisy",       label: "–†–æ–º–∞—à–∫–∞",     emoji: "üåº", imgSrc: "/assets/flowers/daisy.png" },
    { id: "tulip",       label: "–¢—é–ª—å–ø–∞–Ω",     emoji: "üå∑", imgSrc: "/assets/flowers/tulip.png" },
    { id: "hydrangea",   label: "–ì–æ—Ä—Ç–µ–Ω–∑–∏—è",   emoji: "ü™ª", imgSrc: "/assets/flowers/hydrangea.png" },
    { id: "lily",        label: "–õ–∏–ª–∏—è",       emoji: "üå∫", imgSrc: "/assets/flowers/lily.png" },
    { id: "gerbera",     label: "–ì–µ—Ä–±–µ—Ä–∞",     emoji: "üåª", imgSrc: "/assets/flowers/gerbera.png" },
    { id: "eustoma",     label: "–≠—É—Å—Ç–æ–º–∞",     emoji: "üíÆ", imgSrc: "/assets/flowers/eustoma.png" },
    { id: "anthurium",   label: "–ê–Ω—Ç—É—Ä–∏—É–º",    emoji: "üî¥", imgSrc: "/assets/flowers/anthurium.png" }
  ];

  // ---- –£—Ç–∏–ª–∏—Ç—ã ----
  const rndInt = (a, b) => Math.floor(Math.random() * (b - a + 1)) + a;
  const rndFloat = (a, b) => Math.random() * (b - a) + a;
  const rndFrom = (arr) => arr[Math.floor(Math.random() * arr.length)];
  const clamp = (v, min, max) => Math.max(min, Math.min(max, v));

  const $ = (id) => document.getElementById(id);
  const safeShow = (el, show) => { if (el) el.style.display = show ? "" : "none"; };
  const fmtTime = (sec) => {
    const s = Math.max(0, Math.floor(sec));
    const mm = String(Math.floor(s / 60)).padStart(2, "0");
    const ss = String(s % 60).padStart(2, "0");
    return `${mm}:${ss}`;
  };

  // ---- –ö–ª–∞—Å—Å –∏–≥—Ä—ã ----
  class FlowerRushGame {
    constructor() {
      // DOM
      this.elStart = $("startScreen");
      this.elPlayBtn = $("playBtn");
      this.elDiff = $("difficulty");
      this.elHud = $("hud");
      this.elTimer = $("timer");
      this.elScore = $("score");
      this.elOrderList = $("orderList");
      this.elGameField = $("gameField");
      this.elResult = $("resultScreen");
      this.elResultTitle = $("resultTitle");
      this.elResultDetails = $("resultDetails");
      this.elPromoWrap = $("promoWrap");
      this.elPromoCode = $("promoCode");
      this.elPlayAgain = $("playAgainBtn");

      // –°–æ—Å—Ç–æ—è–Ω–∏–µ
      this.state = "menu"; // menu | playing | finished
      this.diffKey = "easy";
      this.diffCfg = DIFFICULTY.easy;

      this.order = null;         // { items: [{id,label,need,collected}], totalNeed }
      this.activeFlowers = new Set();
      this.spawnTimer = null;
      this.gameTimer = null;
      this.endAt = 0;

      this.score = 0;
      this.clicksTotal = 0;
      this.clicksCorrect = 0;

      // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
      this._bindUI();
      this._toMenu();
    }

    _bindUI() {
      if (this.elPlayBtn) {
        this.elPlayBtn.addEventListener("click", () => this.start());
      }
      if (this.elPlayAgain) {
        this.elPlayAgain.addEventListener("click", () => this._toMenu());
      }
      if (this.elDiff) {
        this.elDiff.addEventListener("change", () => {
          const key = this.elDiff.value;
          if (DIFFICULTY[key]) {
            this.diffKey = key;
            this.diffCfg = DIFFICULTY[key];
          }
        });
      }

      // –ö–ª–∏–∫ –º–∏–º–æ —Ü–≤–µ—Ç–æ–≤ = –Ω–∏—á–µ–≥–æ (–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      if (this.elGameField) {
        this.elGameField.addEventListener("pointerdown", (e) => {
          const target = e.target;
          if (target && target.dataset && target.dataset.type === "flower") {
            // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ —Ü–≤–µ—Ç–∫–∞
          }
        }, { passive: true });
      }
    }

    _toMenu() {
      this._stopAll();
      this.state = "menu";
      safeShow(this.elStart, true);
      safeShow(this.elHud, false);
      safeShow(this.elGameField, false);
      safeShow(this.elResult, false);
      this._clearField();
      this._resetHUD();
    }

    start() {
      if (!DIFFICULTY[this.diffKey]) this.diffKey = "easy";
      this.diffCfg = DIFFICULTY[this.diffKey];

      // –°–±—Ä–æ—Å
      this._stopAll();
      this._clearField();
      this.score = 0;
      this.clicksTotal = 0;
      this.clicksCorrect = 0;

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞
      this.order = this._makeOrder();
      this._renderOrder();

      // UI
      this.state = "playing";
      safeShow(this.elStart, false);
      safeShow(this.elHud, true);
      safeShow(this.elGameField, true);
      safeShow(this.elResult, false);
      this._updateScore(0);
      this._updateTimer(this.diffCfg.timerSec);

      // –¢–∞–π–º–µ—Ä –∏–≥—Ä—ã
      this.endAt = performance.now() + this.diffCfg.timerSec * 1000;
      this._tickGameTimer();

      // –°–ø–∞–≤–Ω —Ü–≤–µ—Ç–æ–≤
      this._scheduleSpawn();
    }

    // ---- –ó–∞–∫–∞–∑ ----
    _makeOrder() {
      // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
      const [minItems, maxItems] = this.diffCfg.orderItemsRange;
      const uniqueCount = clamp(rndInt(minItems, maxItems), 1, FLOWERS.length);

      // –±–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
      const pool = [...FLOWERS];
      const items = [];
      for (let i = 0; i < uniqueCount; i++) {
        const idx = rndInt(0, pool.length - 1);
        const chosen = pool.splice(idx, 1)[0];
        const [qMin, qMax] = this.diffCfg.qtyPerItem;
        const need = rndInt(qMin, qMax);
        items.push({ id: chosen.id, label: chosen.label, need, collected: 0 });
      }

      const totalNeed = items.reduce((s, it) => s + it.need, 0);
      return { items, totalNeed, collected: 0 };
    }

    _renderOrder() {
      if (!this.elOrderList || !this.order) return;
      this.elOrderList.innerHTML = "";
      this.order.items.forEach((it, idx) => {
        const li = document.createElement("li");
        li.dataset.flower = it.id;
        li.style.listStyle = "none";
        li.style.margin = "2px 0";

        const fMeta = FLOWERS.find(f => f.id === it.id);
        const emoji = fMeta?.emoji ?? "üíê";

        li.innerHTML = `${emoji} <b>${it.label}</b> ‚Äî <span class="collected">${it.collected}</span>/<span class="need">${it.need}</span>`;
        this.elOrderList.appendChild(li);
      });
    }

    _updateOrderUIFor(id) {
      const li = this.elOrderList?.querySelector(`li[data-flower="${id}"]`);
      if (!li) return;
      const item = this.order.items.find(i => i.id === id);
      if (!item) return;
      const col = li.querySelector(".collected");
      if (col) col.textContent = String(item.collected);
    }

    // ---- –°–ø–∞–≤–Ω ----
    _scheduleSpawn() {
      if (this.state !== "playing") return;
      const [minMs, maxMs] = this.diffCfg.spawnEveryMs;
      const delay = rndInt(minMs, maxMs);
      this.spawnTimer = window.setTimeout(() => {
        this._spawnOne();
        this._scheduleSpawn();
      }, delay);
    }

    _spawnOne() {
      if (!this.elGameField || this.state !== "playing") return;
      if (this.activeFlowers.size >= this.diffCfg.maxActive) return;

      // –í—ã–±–∏—Ä–∞–µ–º –ª—é–±–æ–π —Ü–≤–µ—Ç–æ–∫ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑ –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –±—ã–ª–∏ "–ª–∏—à–Ω–∏–µ")
      const flower = rndFrom(FLOWERS);

      // –°–æ–∑–¥–∞—ë–º DOM —ç–ª–µ–º–µ–Ω—Ç
      const el = document.createElement("div");
      el.dataset.type = "flower";
      el.dataset.id = flower.id;
      el.style.position = "absolute";
      el.style.userSelect = "none";
      el.style.cursor = "pointer";
      el.style.fontSize = rndInt(20, 34) + "px";
      el.style.lineHeight = "1";
      el.style.transform = `translate(-50%, -50%) rotate(${rndInt(-15, 15)}deg)`;
      el.style.transition = "transform 120ms ease, opacity 140ms ease";

      // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: PNG (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ —ç–º–æ–¥–∑–∏
      if (flower.imgSrc) {
        const img = document.createElement("img");
        img.src = flower.imgSrc;
        img.alt = flower.label;
        img.style.width = rndInt(36, 58) + "px";
        img.style.height = "auto";
        img.draggable = false;
        el.appendChild(img);
      } else {
        el.textContent = flower.emoji || "üíê";
      }

      // –ü–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è (—Å –æ—Ç—Å—Ç—É–ø–∞–º–∏)
      const rect = this.elGameField.getBoundingClientRect();
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–µ–∑–∞—Ç—å –∑–∞ –∫—Ä–∞—è (–ø–æ–ª—è 8%)
      const topPct = rndFloat(10, 90);
      const leftPct = rndFloat(10, 90);
      el.style.top = topPct + "%";
      el.style.left = leftPct + "%";

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      const clickHandler = (e) => {
        e.stopPropagation();
        this._onFlowerClick(el);
      };
      el.addEventListener("pointerdown", clickHandler, { passive: true });

      // –î–æ–±–∞–≤–ª—è–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
      this.elGameField.appendChild(el);
      this.activeFlowers.add(el);

      // –£–¥–∞–ª—è–µ–º –ø–æ TTL
      const [ttlMin, ttlMax] = this.diffCfg.ttlMs;
      const ttl = rndInt(ttlMin, ttlMax);
      el._despawnTimer = window.setTimeout(() => {
        this._despawn(el);
      }, ttl);
    }

    _despawn(el) {
      if (!el || !this.activeFlowers.has(el)) return;
      this.activeFlowers.delete(el);
      try {
        if (el._despawnTimer) clearTimeout(el._despawnTimer);
        el.style.opacity = "0";
        el.style.transform += " scale(0.85)";
        setTimeout(() => el.remove(), 120);
      } catch {
        el.remove();
      }
    }

    // ---- –ö–ª–∏–∫ –ø–æ —Ü–≤–µ—Ç–∫—É ----
    _onFlowerClick(el) {
      if (this.state !== "playing") return;
      this.clicksTotal++;

      const id = el?.dataset?.id;
      const item = this.order.items.find(i => i.id === id && i.collected < i.need);

      if (item) {
        // –ü–æ–ø–∞–ª–∏ –≤ –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç–æ–∫
        item.collected += 1;
        this.order.collected += 1;
        this.clicksCorrect++;
        this._updateOrderUIFor(id);

        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        el.style.transform += " scale(1.12)";
        el.style.opacity = "0.2";
        setTimeout(() => this._despawn(el), 60);

        // –û—á–∫–∏
        this._updateScore(this.diffCfg.correctScore);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        if (this.order.collected >= this.order.totalNeed) {
          this._finish(true);
        }
      } else {
        // –ú–∏–º–æ –∑–∞–∫–∞–∑–∞ ‚Äî —à—Ç—Ä–∞—Ñ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—á–∫–∞–º
        this._timePenalty(this.diffCfg.missPenaltySec);
        this._updateScore(this.diffCfg.wrongScore);

        // –ù–µ–±–æ–ª—å—à–æ–π "—à–∞—Ç" –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
        el.style.transform += " translateY(4px) scale(0.9)";
        setTimeout(() => this._despawn(el), 80);
      }
    }

    // ---- –¢–∞–π–º–µ—Ä –∏–≥—Ä—ã ----
    _tickGameTimer() {
      if (this.state !== "playing") return;
      const now = performance.now();
      const msLeft = this.endAt - now;
      const secLeft = Math.max(0, Math.ceil(msLeft / 1000));
      this._updateTimer(secLeft);

      if (msLeft <= 0) {
        this._finish(false);
        return;
      }
      this.gameTimer = window.requestAnimationFrame(() => this._tickGameTimer());
    }

    _updateTimer(sec) {
      if (this.elTimer) {
        this.elTimer.textContent = `‚è≥ ${fmtTime(sec)}`;
      }
    }

    _timePenalty(sec) {
      // –°–º–µ—â–∞–µ–º –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã –±–ª–∏–∂–µ –Ω–∞ sec —Å–µ–∫—É–Ω–¥
      this.endAt -= sec * 1000;
      // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–ª—ç—à —Ç–∞–π–º–µ—Ä–∞
      if (this.elTimer) {
        const old = this.elTimer.style.color;
        this.elTimer.style.color = "#c0392b";
        setTimeout(() => { this.elTimer.style.color = old || ""; }, 200);
      }
    }

    // ---- –û—á–∫–∏ ----
    _updateScore(delta) {
      this.score = Math.max(0, this.score + delta);
      if (this.elScore) {
        this.elScore.textContent = `–û—á–∫–∏: ${this.score}`;
      }
    }

    // ---- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ----
    _finish(win) {
      if (this.state !== "playing") return;
      this.state = "finished";
      this._stopAll();

      // –ü–æ–¥—Å—á—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞ —Å –±–æ–Ω—É—Å–∞–º–∏
      const timeLeftSec = Math.max(0, Math.ceil((this.endAt - performance.now()) / 1000));
      const accuracy = this.clicksTotal ? (this.clicksCorrect / this.clicksTotal) : 0;
      const accScore = Math.round(accuracy * 100); // 0..100
      const final =
        this.score +
        Math.round(timeLeftSec * 5) +
        accScore +
        this.diffCfg.difficultyBonus +
        (win ? 50 : 0);

      // –†–µ–π—Ç–∏–Ω–≥ –∑–≤—ë–∑–¥
      let stars = "‚òÖ‚òÜ‚òÜ";
      if (final >= 220) stars = "‚òÖ‚òÖ‚òÖ";
      else if (final >= 140) stars = "‚òÖ‚òÖ‚òÜ";

      // –ü—Ä–æ–º–æ
      let promo = "";
      if (win) {
        promo = this._genPromoCode();
      }

      // UI
      safeShow(this.elHud, false);
      safeShow(this.elGameField, false);
      safeShow(this.elResult, true);

      if (this.elResultTitle) {
        this.elResultTitle.textContent = win
          ? "–ë—É–∫–µ—Ç –≥–æ—Ç–æ–≤! üíê"
          : "–£–ø—Å, –≤—Ä–µ–º—è –≤—ã—à–ª–æ ‚è≥";
      }

      if (this.elResultDetails) {
        const accPct = Math.round(accuracy * 100);
        this.elResultDetails.innerHTML =
          `–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>${final}</b> ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: <b>${accPct}%</b> ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: <b>${fmtTime(timeLeftSec)}</b><br>` +
          `–°–ª–æ–∂–Ω–æ—Å—Ç—å: <b>${DIFFICULTY[this.diffKey].label}</b> ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: <b>${stars}</b>`;
      }

      if (this.elPromoWrap && this.elPromoCode) {
        if (promo) {
          this.elPromoWrap.style.display = "";
          this.elPromoCode.textContent = promo;
        } else {
          this.elPromoWrap.style.display = "none";
        }
      }

      // –ß–∏—Å—Ç–∏–º –ø–æ–ª–µ
      this._clearField();
    }

    _genPromoCode() {
      // –ü—Ä–æ—Å—Ç–æ–π –∫—É–ø–æ–Ω: FLWR-XXXXXX (–±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã)
      const alph = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789";
      let s = "";
      for (let i = 0; i < 6; i++) s += alph[Math.floor(Math.random() * alph.length)];
      return `FLWR-${s}`;
    }

    // ---- –°–ª—É–∂–µ–±–Ω—ã–µ ----
    _stopAll() {
      if (this.spawnTimer) clearTimeout(this.spawnTimer);
      this.spawnTimer = null;
      if (this.gameTimer) cancelAnimationFrame(this.gameTimer);
      this.gameTimer = null;

      // –°–Ω—è—Ç—å —Ç–∞–π–º–µ—Ä—ã —É –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      this.activeFlowers.forEach(el => {
        if (el._despawnTimer) clearTimeout(el._despawnTimer);
      });
      this.activeFlowers.clear();
    }

    _clearField() {
      if (!this.elGameField) return;
      this.elGameField.innerHTML = "";
      this.activeFlowers.clear();
    }

    _resetHUD() {
      if (this.elTimer) this.elTimer.textContent = `‚è≥ ${fmtTime(this.diffCfg.timerSec)}`;
      if (this.elScore) this.elScore.textContent = "–û—á–∫–∏: 0";
      if (this.elOrderList) this.elOrderList.innerHTML = "";
    }
  }

  // ---- –ó–∞–ø—É—Å–∫ ----
  window.addEventListener("DOMContentLoaded", () => {
    // –°–¥–µ–ª–∞–µ–º –∏–≥—Ä—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤ window, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å–Ω–∞—Ä—É–∂–∏
    window.flowerRushGame = new FlowerRushGame();
  });

})();

